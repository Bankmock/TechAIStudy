<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Format Converter with Compression</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
            background-color: #f4f4f4;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
        }

        input[type="file"] {
            display: block;
            margin: 20px auto;
        }

        select, button {
            padding: 10px;
            margin: 10px 0;
            font-size: 16px;
            width: calc(100% - 22px);
            max-width: 300px;
            border-radius: 5px;
            border: 1px solid #ccc;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: background-color 0.3s;
        }

        select:hover, button:hover {
            background-color: #e9e9e9;
        }

        #saveButton {
            background-color: #28a745;
            color: white;
            display: none;
        }

        #saveButton:hover {
            background-color: #218838;
        }

        #downloadLink {
            display: none;
        }

        .image-info {
            text-align: center;
            margin-top: 10px;
            color: #555;
        }

        #compressionRange {
            width: 100%;
            max-width: 300px;
            margin: 20px auto;
        }

        #compressionValue {
            text-align: center;
            color: #333;
        }
    </style>
</head>
<body>
    <h1>Image Format Converter with Compression</h1>
    
    <input type="file" id="imageInput" accept="image/*">
    <select id="formatSelect">
        <option value="image/jpeg">JPEG</option>
        <option value="image/png">PNG</option>
        <option value="image/gif">GIF</option>
        <option value="image/webp">WEBP</option>
    </select>
    
    <label for="compressionRange">JPEG Compression Quality (0-100):</label>
    <input type="range" id="compressionRange" min="0" max="100" value="100">
    <div id="compressionValue">Quality: 100</div>
    
    <button id="convertButton">Convert</button>
    
    <canvas id="canvas" style="display:none;"></canvas>
    <a id="downloadLink" style="display:none;">Download Converted Image</a>
    <button id="saveButton" style="display:none;">Save to Device</button>
    
    <div id="imageSizeInfo" class="image-info"></div>
    <div id="convertedSizeInfo" class="image-info"></div>

    <script>
        const compressionRange = document.getElementById('compressionRange');
        const compressionValue = document.getElementById('compressionValue');

        compressionRange.addEventListener('input', function() {
            compressionValue.innerText = `Quality: ${this.value}`;
        });

        document.getElementById('convertButton').addEventListener('click', function() {
            const input = document.getElementById('imageInput');
            const format = document.getElementById('formatSelect').value;

            if (input.files && input.files[0]) {
                const file = input.files[0];
                const reader = new FileReader();

                // Display the original image size
                const originalSizeKB = (file.size / 1024).toFixed(2); // Size in KB
                const originalSizeMB = (file.size / (1024 * 1024)).toFixed(2); // Size in MB
                document.getElementById('imageSizeInfo').innerText = `Original Image Size: ${originalSizeKB} KB (${originalSizeMB} MB)`;

                reader.onload = function(e) {
                    const img = new Image();
                    img.onload = function() {
                        const canvas = document.getElementById('canvas');
                        canvas.width = img.width;
                        canvas.height = img.height;
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0);

                        // Set the JPEG quality for compression
                        const quality = format === 'image/jpeg' ? compressionRange.value / 100 : undefined;

                        // Convert the image to the selected format
                        const convertedDataUrl = canvas.toDataURL(format, quality);

                        // Set the download link
                        const downloadLink = document.getElementById('downloadLink');
                        downloadLink.href = convertedDataUrl;
                        downloadLink.download = `converted_image.${format.split('/')[1]}`;
                        downloadLink.style.display = 'block';
                        downloadLink.innerText = 'Download Converted Image';

                        // Show the save button
                        document.getElementById('saveButton').style.display = 'block';
                        document.getElementById('saveButton').onclick = function() {
                            saveFile(convertedDataUrl);
                        };

                        // Display the converted image size
                        const convertedSizeKB = (convertedDataUrl.length * 3 / 4 / 1024).toFixed(2); // Size in KB
                        const convertedSizeMB = (convertedDataUrl.length * 3 / 4 / (1024 * 1024)).toFixed(2); // Size in MB
                        document.getElementById('convertedSizeInfo').innerText = `Converted Image Size: ${convertedSizeKB} KB (${convertedSizeMB} MB)`;
                    }
                    img.src = e.target.result;
                }
                reader.readAsDataURL(file);
            } else {
                alert("Please select an image file.");
            }
        });

        async function saveFile(dataUrl) {
            try {
                const blob = dataURLToBlob(dataUrl);
                let fileHandle = await window.showSaveFilePicker({
                    suggestedName: 'converted_image.png',
                    types: [
                        { description: 'PNG Images', accept: {'image/png': ['.png']} },
                        { description: 'JPEG Images', accept: {'image/jpeg': ['.jpg', '.jpeg']} },
                        { description: 'GIF Images', accept: {'image/gif': ['.gif']} },
                        { description: 'WEBP Images', accept: {'image/webp': ['.webp']} }
                    ]
                });

                const writable = await fileHandle.createWritable();
                await writable.write(blob);
                await writable.close();
                alert('Image saved successfully!');
            } catch (err) {
                console.error('Error saving file:', err);
                alert('Failed to save the image.');
            }
        }

        function dataURLToBlob(dataUrl) {
            const arr = dataUrl.split(','),
                mime = arr[0].match(/:(.*?);/)[1],
                bstr = atob(arr[1]),
                n = bstr.length,
                u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new Blob([u8arr], { type: mime });
        }
    </script>
</body>
</html>
